/*
Author: Hermann Plass (hermann.plass@gmail.com)
video-preview.js (c) 2021
Desc: description
Created:  2021-04-21T12:53:49.657Z
Modified: 2021-04-22T12:41:49.821Z
*/
import {useState, useEffect } from 'react';
import { rtcClient, appClient, mediaAdapter } from 'extra/bra';
import {ButtonGroup, SplitButton, Button, Dropdown, DropdownButton, Container, Row, Col} from 'react-bootstrap';

import './stream-view.scss';

export default function StreamView({Preview})
{
    const [callId, setCallId]             = useState(true);
    const [video, setVideo]               = useState(true);
    const [audio, setAudio]               = useState(true);
    const [stream, setStream]             = useState(true);
    const [resolution, setResolution]     = useState(true);

    const [devices, setDevices]           = useState(null);
    const [settings, setSettings]         = useState(null);
    const [resolutions, setResolutions]   = useState(null);

    const [videoOptions, setVideoOptions] = useState([]);
    const [audioOptions, setAudioOptions] = useState([]);

    useEffect(()=>{ //On load
        let onGotDevices, onErrorDevices, onGotResolutions, onGotStream, onErrorStream;
        mediaAdapter.on("got_devices",      onGotDevices        = ( {devices,settings})=>{ setDevices(devices); setSettings(settings); });
        mediaAdapter.on("error_devices",    onErrorDevices      = ( {description})=>console.error("Media devices error:", description));
        mediaAdapter.on("got_resolutions",  onGotResolutions    = ( {resolutions})=>setResolutions(resolutions));
        mediaAdapter.on("got_stream",       onGotStream         = ( {stream, settings})=>{ 
                                                                        setStream(stream); 
                                                                        setAudio(settings.audio); 
                                                                        setVideo(settings.video); 
                                                                        setResolution(settings.resolution); 
                                                                        rtcClient.replaceStream(callId, stream);
                                                                    });
        mediaAdapter.on("error_stream",     onErrorStream       = ( {description})=>console.error("Stream error:", description));
        mediaAdapter.start();
    
        let prefs = sessionStorage.getItem("admire-user-preferences") ?? localStorage.getItem("admire-user-preferences");
        if(prefs){
            const {audio,video} = JSON.parse(prefs);
            setVideo(video);
            setAudio(audio);
        }
    
        return ()=>{
            mediaAdapter.off("got_devices",     onGotDevices);
            mediaAdapter.off("error_devices",   onErrorDevices);
            mediaAdapter.off("got_resolutions", onGotResolutions);
            mediaAdapter.off("got_stream",      onGotStream);
            mediaAdapter.off("error_stream",    onErrorStream);
            
            const prefs = JSON.stringify({video:video, audio:audio});
            localStorage.setItem("admire-user-preferences", prefs);
            sessionStorage.setItem("admire-user-preferences", prefs);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    },[]);

    return (<Container className="stream-view d-flex vh-100 justify-content-sm-center" style={{marginTop:"-4.5rem"}}>

            <div className="m-auto align-self-center">
        <Row>
            <video></video>
        </Row>

        {InputSelect && <Row className="mt-2 justify-content-sm-center"    noGutters>
            <Col xs="auto">
            <SplitButton
                size="lg"
                drop="up"
                as={ButtonGroup}
                id={`dropdown-button-drop-up`}
                variant="outline-primary"
                title={<i className={`bi ${video?"bi-camera-video-fill":"bi-camera-video-off-fill"}`}/>}
                toggleLabel=""
                onClick={()=>setVideo(!video)}
            >
                {videoOptions && !videoOptions.size && <Dropdown.Item disabled eventKey={0}>No options available</Dropdown.Item>}
                {videoOptions && videoOptions.map((v,k,a)=>{
                    return (<>
                        <Dropdown.Item eventKey={k}>Action {k}</Dropdown.Item>
                    </>);
                })}
            </SplitButton>
            </Col>

            <Col xs="auto">
            <SplitButton
                size="lg"
                as={ButtonGroup}
                id={`dropdown-button-drop-up`}
                drop="up"
                variant="outline-primary"
                title={<i className={`bi ${audio?"bi-mic-fill":"bi-mic-mute-fill"}`}/>}
                toggleLabel=""
                onClick={()=>setAudio(!audio)}
            >
                {audioOptions && !audioOptions.size && <Dropdown.Item disabled eventKey={0}>No options available</Dropdown.Item>}
                {audioOptions && audioOptions.map((v,k,a)=>{
                    return (<>
                        <Dropdown.Item eventKey={k}>Action {k}</Dropdown.Item>
                    </>);
                })}
            </SplitButton>
            </Col>
        </Row>}

        
                </div>
    </Container>);
}