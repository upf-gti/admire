{"version":3,"sources":["views/reset-password.js"],"names":["post","a","v","url","data","d","JSON","stringify","fetch","method","mode","cache","headers","body","response","json","ResetPassword","token","useParams","history","useHistory","passwordRef","useRef","Log","useContext","ToastContext","API","e","preventDefault","Array","from","current","elements","map","value","password","toastId","toast","loading","then","success","id","setTimeout","push","error","message","catch","err","className","show","centered","backdrop","size","dialogClassName","Header","Title","Body","as","Form","ref","Group","Control","placeholder","type","Footer","variant","onClick"],"mappings":"uRAUeA,I,2EAAf,gDAAAC,EAAA,sDACI,IAAQC,KADQC,EAApB,+BAA0B,GAAIC,EAA9B,+BAAqC,GAEzBA,EAAKF,WAAWE,EAAKF,GAFjC,OAGUG,EAAIC,KAAKC,UAAUH,GAH7B,SAM2BI,MAAML,EAAK,CAC9BM,OAAQ,OACRC,KAAM,OACNC,MAAO,WAEPC,QAAS,CACL,eAAgB,oBAKpBC,KAAMR,IAjBd,cAMUS,EANV,yBAmBWA,EAASC,QAnBpB,4C,sBAsBe,SAASC,IAAgB,IAE9BC,EAAUC,cAAVD,MACAE,EAAUC,cACVC,EAAcC,iBAAO,MACrBC,EAAMC,qBAAWC,KAEnBC,EAAM,2CAPyB,4CAWnC,WAAgCC,GAAhC,qBAAA1B,EAAA,6DACI0B,EAAEC,iBADN,EAEuBC,MAAMC,KAAKT,EAAYU,QAAQC,UAAUC,KAAI,SAAA/B,GAAC,OAAIA,EAAEgC,SAF3E,mBAEWC,EAFX,KAGUC,EAAUC,IAAMC,QAAQ,yBAHlC,SAIUtC,EAAK,GAAD,OAAI0B,EAAJ,2BAA0BT,GAAS,CAAEkB,aAC9CI,MAAK,SAAAzB,GACEA,GAIJS,EAAIiB,QAAQ,UAAW,CAACC,GAAIL,IAC5BM,YAAY,kBAAIvB,EAAQwB,KAAR,OAAmB,MAJ/BpB,EAAIqB,MAAJ,iBAAoB9B,EAAS+B,SAAW,CAACJ,GAAIL,OAMpDU,OAAM,SAAAC,GACHxB,EAAIqB,MAAJ,iBAAoBG,GAAO,CAACN,GAAIL,OAdxC,4CAXmC,sBA6BnC,OApBAV,EADa,uCACFA,EAoBJ,qCACH,cAAC,IAAD,UACI,6DAGJ,cAAC,IAAD,CAAWsB,UAAU,sBAArB,SACI,qBAAKA,UAAU,2BAAf,SAEI,eAAC,IAAD,CACIC,MAAM,EACNC,UAAQ,EACRC,SAAS,SACTC,KAAK,KACLC,gBAAgB,kBALpB,UAOI,cAAC,IAAMC,OAAP,UACI,cAAC,IAAMC,MAAP,kCAEJ,eAAC,IAAMC,KAAP,CAAYC,GAAIC,IAAMC,IAAKtC,EAA3B,UAEI,gEAEA,cAAC,IAAKuC,MAAN,CAAYZ,UAAU,YAAtB,SACI,cAAC,IAAKa,QAAN,CAAcC,YAAY,WAAWC,KAAK,kBAIlD,cAAC,IAAMC,OAAP,UACI,eAAC,IAAD,CAAQC,QAAQ,UAAYC,QAzDb,4CAyDf,UAAuD,mBAAGlB,UAAU,mBAApE","file":"static/js/13.c9b2917a.chunk.js","sourcesContent":["import { useRef, useContext } from 'react';\r\nimport { ToastContext } from 'components/toasts';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Container, Modal, Form, Button } from \"react-bootstrap\";\r\nimport toast from 'react-hot-toast';\r\n\r\nimport Helmet from 'react-helmet';\r\nimport AnimatedBackground from 'components/animatedBackground';\r\n\r\n\r\nasync function post(url = '', data = {}) {\r\n    for(let v in data)\r\n        if(!data[v]) delete(data[v]);\r\n    const d = JSON.stringify(data);\r\n    \r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        //credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        //redirect: 'follow', // manual, *follow, error\r\n        //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: d // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\nexport default function ResetPassword(){\r\n    \r\n    let { token } = useParams();\r\n    const history = useHistory();\r\n    const passwordRef = useRef(null);\r\n    const Log = useContext(ToastContext);\r\n\r\n    let API = 'https://admire-dev-auth.brainstorm3d.com';\r\n    const CORS = \"https://cors-anywhere.herokuapp.com/\"\r\n    API = CORS+API;//Comment this on development\r\n\r\n    async function doSubmitPassword(e) {\r\n        e.preventDefault();\r\n        const [password] = Array.from(passwordRef.current.elements).map(v => v.value);\r\n        const toastId = toast.loading('Resetting password...');\r\n        await post(`${API}/reset-password/${token}`, { password })\r\n        .then(response => {\r\n            if(!response){\r\n                Log.error(`Error: ${response.message}`, {id: toastId});\r\n                return;\r\n            }\r\n            Log.success('Success', {id: toastId});\r\n            setTimeout( ()=>history.push(`/`), 1000);\r\n        })\r\n        .catch(err => {\r\n            Log.error(`Error: ${err}`, {id: toastId});\r\n        });\r\n    }\r\n\r\n    return <>\r\n        <Helmet>\r\n            <title>AdMiRe: Reset password</title>\r\n        </Helmet>\r\n\r\n        <Container className=\"login d-flex vh-100\">\r\n            <div className=\"m-auto align-self-center\">\r\n\r\n                <Modal\r\n                    show={true}\r\n                    centered\r\n                    backdrop=\"static\"\r\n                    size=\"md\"\r\n                    dialogClassName=\"modal-shadow-lg\"\r\n                >\r\n                    <Modal.Header>\r\n                        <Modal.Title>Password Recovery</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body as={Form} ref={passwordRef}>\r\n\r\n                        <span>Please enter a new password.</span>\r\n\r\n                        <Form.Group className=\"mb-2 mt-4\" >\r\n                            <Form.Control placeholder='password' type=\"password\" />\r\n                        </Form.Group>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\"   onClick={doSubmitPassword}><i className=\"bi bi-telegram\"></i> Send</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </div>\r\n        </Container>\r\n    </>;\r\n}"],"sourceRoot":""}